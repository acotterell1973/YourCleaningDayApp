{"version":3,"sources":["customer.service.ts"],"names":["CustomerService","http","this","baseUrl","prototype","getMostRecent","num","url","get","map","response","json","catch","handleError","getAll","getCustomer","id","Error","err","caught","console","error","Observable_1","Observable","throw","__decorate","core_1","Injectable","http_1","Http"],"mappings":"+6BAMaA,gBAAe,WACxB,QAAAA,iBAAoBC,MAAAC,KAAAD,KAAAA,KAEZC,KAAAC,QAAU,gBAmCtB,MAhCIH,iBAAAI,UAAAC,cAAA,SAAcC,KACV,GAAIC,KAAML,KAAKC,QAAU,YAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,gBAAAI,UAAAU,OAAA,WACI,GAAIP,KAAML,KAAKC,OACf,OAAOD,MAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,gBAAAI,UAAAW,YAAA,SAAYC,IACR,GAAIT,KAAML,KAAKC,OACf,IAAU,MAANa,GACA,KAAM,IAAIC,OAAM,kBAEpB,OAAOf,MAAKD,KAAKO,IAAID,IAAMS,IACtBP,IAAI,SAAAC,UAAY,MAAUA,UAASC,SACnCC,MAAMV,KAAKW,cAGZb,gBAAAI,UAAAS,YAAR,SAAoBK,IAAeC,QAE/B,MADAC,SAAQC,MAAMH,KACPI,aAAAC,WAAWC,MAAMN,IAAIP,OAAOU,OAAS,iBAGpDrB,mBAtCaA,gBAAeyB,YAD3BC,OAAAC,6CAE6BC,OAAAC,QADjB7B","file":"customer.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Customer } from \"./customer\";\r\n\r\n@Injectable()\r\nexport class CustomerService {\r\n    constructor(private http: Http) { }\r\n\r\n    private baseUrl = \"api/customer/\";\r\n\r\n    // calls the [GET] /api/customer/mostrecent Web API \r\n    getMostRecent(num?: number) {\r\n        var url = this.baseUrl + \"mostrecent\";\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/customer/ Web API \r\n    getAll() {\r\n        var url = this.baseUrl;\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/customer/ Web API \r\n    getCustomer(id: number) {\r\n        var url = this.baseUrl;\r\n        if (id == null) {\r\n            throw new Error(\"id is required.\");\r\n        }\r\n        return this.http.get(url + id)\r\n            .map(response => <Customer>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(err: Response, caught: Observable<Object>) {\r\n        console.error(err);\r\n        return Observable.throw(err.json().error || \"Server error\");\r\n    }\r\n\r\n}\r\n"]}